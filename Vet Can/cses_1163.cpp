    // Nguyễn Bá Hà

#include <bits/stdc++.h>
using namespace std;

#define fi first
#define se second
#define mp(x,y) make_pair(x,y)
#define fore(i,a,b) for (int i=a,ThxDem=b;i<ThxDem;i++)
#define ford(i,a,b) for (int i=a-1,ThxDem=b;i>=ThxDem;i--)
#define pb push_back
#define all(s) s.begin(),s.end()
#define rall(s) s.rbegin(),s.rend()
 #define prec(n) fixed<<setprecision(n)
typedef unsigned long long ull;
typedef long long ll;
const ll MAXN= 200005;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<pll> vll;
typedef vector<pii> vii;
typedef vector<string> vs;
const ll mod= 1e9+7;
#define out(x) cout << x 
#define yes cout<<"YES"<<endl
#define no  cout<<"NO"<<endl
#define minpq(s) priority_queue<int, vector<int>, greater<int>> = s;
#define bit(i,j) ((i>>j) & 1)
// __gcd(n,0) = n;
#define see(x) cout << #x << " = " << x << ' '
#define seen(x) cout << #x << " = " << x << '\n'

            //(////(/((//#//%%%&&&&&&&&&%%%%%%##############((/,,,,*((((((((((((#######(#%####
            //////////(//(//%#######&%#%%%%%%%%&%%##########(,,,,,(((((((((((#########%%######
            ///////////////#%%######%#########%%&%#########(,,,,*/(#/(((##(#########%#########
            //#######%%%%###########%############%%%%%%%%%/,,/((###((#####((/(#/##%###########
            //%%%%###%%%%%%%%#########################%#(#########################%%%%%%%%%%##
            //((######&&%%%%%%%#####((#((####(#(##%%%%%%%###########%%###(%%%%%%#############%
            //########&%&&&%%%%%%%%%%&&&&&&&&&&&&&%%#%%%%%#%%%%%%%%%%#########%%%%%%#%(##(((((
            //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%##%%%%#(((///**////((#%%%%%%#(#####
            //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%%%#(#%&%#(//////*/**/////((##(%%#######
            //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%&%#(#%%%(////****////*////(((##(%####(((
            //###############&(#################(%%%%&&#%(%%#((//**/*//*//////*///((#(%%##((((
            //###############%###############(((%%%%%&%((%%##/////////////////////(((#(%####((
            //#%%%%&&&%&%%%%%#%%%##%%#%######(*%%%%%%#((#%&%%####%##((//////(((######%(%###(//
            //&%&%%&&&&%%%%%%(%%&&&%%%%%%%%#/,/%%&&%%//#%%(((((((((((((////((((((((((##%#/,*,/
            //*/**,****((####((###(((*********#%#%%#(//(#%#%%(#%%(#((((///(((#(%%%(%#(*##((/((
            ///*//*****%%(#(#(#((#(((*******,(#&&###(/(((#(((((((((((///*/((((((((((((/%%#%###
            //**///**%%&%####(#((((%%%**(,,##(//#&((((((#(//////////*///**//((((//(((((%%%#%%%
            //*////*///*,,*#(&&&&&%%%/#*,,***/*////((/(((#/////////(///****/(///////((%%%%%%%%
            //*,,*****/(/****,*,,,*,***,,*******///**/((#((//////((//////////////////(#%#%%%%%
            //***,*,,*,*///***,*,/****,,,*,,**/**//*/#(//((/////(///(((((((((///////((###((/(#
            //,,,,,,**,,*////***//((**,,,**,****/*/(/((#((#(((((%((((#((/((//((((///((((###(//
            //,,,****,*,,*****/*(//*******,*****,//////(//#(((((///#####%#%#(%(///(#((((((((((
            //***********//////(/*/(**********/*///%%%/////(((/(////(((((((#(///((////(((((/,,
            //***/*//////**/*/*/%///****/////****/%%%%**//((////(//////((#///////(//#((###(//*
            //,*,*******///(//####///*(///////***(((#((/////((////(#((#////*/***/**/**********
            //,*,,******/*/((((((/*,**/*******/*****((//////////////#/****//(/*****(/(####(#(/
            //,,,,*********,*////(*,***********/***////////////////******/%#((//***/*(####((#(
            //***,********/**///((*,*************(//*////////////******************/*//*******
            //*/*,********(***,**/****///*///(#%%%#*/**/////////*//**************/*/*/****,***
            //*,,,*,,,****,,*****/*/*,********%%%%%#//////////////////********/((//***,*******
            //,,,,**,*********/***,*,**********%####%#*//***//////////////*****#(#///******,**
            //(*,,****//((#**************,******#####(#**/***/*///////////////**(/(/**********


         const ll MULTI_TESTS = 0;
   // here
   
         void unstoppable()
      {
   
      int n,x, ans;
      cin >>  x>> n;
      ans  = 0;
      set<int> s;
      multiset<int> ms;
      s.insert(0);
      s.insert(x);
      fore(i,0,n)
      {
         int tmp;
         cin >> tmp;
         auto r = s.upper_bound(tmp);
         auto l = s.lower_bound(tmp);
         r--;
         //cout<<*l<<' '*r;
         if(*r < tmp) ++r;
         if(*l > tmp) --l;

         auto dist = *r - *l;
         auto cnt = ms.find(dist);

         if(cnt != ms.end())
            ms.erase(cnt) ; // dist
        // cout<<tmp-*l<<' '<<*r-tmp;
         s.insert(tmp) ;
         ms.insert(tmp-*l);
         ms.insert(*r-tmp);

         cout<<*--ms.end() <<' ';
      }

}




   // main

      signed main()
{
          std::ios::sync_with_stdio(false);
          cin.tie(0);cout.tie(0);
   if (MULTI_TESTS)
   {
        ll Q;
        cin >> Q;
        while (Q--) 
   {
            unstoppable();
        }
    } 
    else 
       {
        unstoppable();
       }
    return 0;
}

