// Nguyễn Bá Hà

#include <bits/stdc++.h>
using namespace std;

#define fi first
#define se second
#define mp(x,y) make_pair(x,y)
#define fore(i,a,b) for (int i=a,ThxDem=b;i<ThxDem;i++)
#define ford(i,a,b) for (int i=a-1,ThxDem=b;i>=ThxDem;i--)
#define pb push_back
#define all(s) s.begin(),s.end()
#define rall(s) s.rbegin(),s.rend()
 #define prec(n) fixed<<setprecision(n)
typedef unsigned long long ull;
typedef long long ll;
const int maxn = 3e5+6;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<pll> vll;
typedef vector<pii> vii;
typedef vector<string> vs;
const ll mod= 1e9+7;
#define out(x) cout << x 
#define yes cout<<"YES"<<endl
#define no  cout<<"NO"<<endl
#define minpq(s) priority_queue<int, vector<int>, greater<int>> = s;
#define bit(p,x) ((x>>p) & 1)
// __gcd(n,0) = n;
#define see(x) cout << #x << " = " << x << ' '
#define seen(x) cout << #x << " = " << x << '\n'

                //(////(/((//#//%%%&&&&&&&&&%%%%%%##############((/,,,,*((((((((((((#######(#%####
                //////////(//(//%#######&%#%%%%%%%%&%%##########(,,,,,(((((((((((#########%%######
                ///////////////#%%######%#########%%&%#########(,,,,*/(#/(((##(#########%#########
                //#######%%%%###########%############%%%%%%%%%/,,/((###((#####((/(#/##%###########
                //%%%%###%%%%%%%%#########################%#(#########################%%%%%%%%%%##
                //((######&&%%%%%%%#####((#((####(#(##%%%%%%%###########%%###(%%%%%%#############%
                //########&%&&&%%%%%%%%%%&&&&&&&&&&&&&%%#%%%%%#%%%%%%%%%%#########%%%%%%#%(##(((((
                //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%##%%%%#(((///**////((#%%%%%%#(#####
                //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%%%#(#%&%#(//////*/**/////((##(%%#######
                //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%&%#(#%%%(////****////*////(((##(%####(((
                //###############&(#################(%%%%&&#%(%%#((//**/*//*//////*///((#(%%##((((
                //###############%###############(((%%%%%&%((%%##/////////////////////(((#(%####((
                //#%%%%&&&%&%%%%%#%%%##%%#%######(*%%%%%%#((#%&%%####%##((//////(((######%(%###(//
                //&%&%%&&&&%%%%%%(%%&&&%%%%%%%%#/,/%%&&%%//#%%(((((((((((((////((((((((((##%#/,*,/
                //*/**,****((####((###(((*********#%#%%#(//(#%#%%(#%%(#((((///(((#(%%%(%#(*##((/((
                ///*//*****%%(#(#(#((#(((*******,(#&&###(/(((#(((((((((((///*/((((((((((((/%%#%###
                //**///**%%&%####(#((((%%%**(,,##(//#&((((((#(//////////*///**//((((//(((((%%%#%%%
                //*////*///*,,*#(&&&&&%%%/#*,,***/*////((/(((#/////////(///****/(///////((%%%%%%%%
                //*,,*****/(/****,*,,,*,***,,*******///**/((#((//////((//////////////////(#%#%%%%%
                //***,*,,*,*///***,*,/****,,,*,,**/**//*/#(//((/////(///(((((((((///////((###((/(#
                //,,,,,,**,,*////***//((**,,,**,****/*/(/((#((#(((((%((((#((/((//((((///((((###(//
                //,,,****,*,,*****/*(//*******,*****,//////(//#(((((///#####%#%#(%(///(#((((((((((
                //***********//////(/*/(**********/*///%%%/////(((/(////(((((((#(///((////(((((/,,
                //***/*//////**/*/*/%///****/////****/%%%%**//((////(//////((#///////(//#((###(//*
                //,*,*******///(//####///*(///////***(((#((/////((////(#((#////*/***/**/**********
                //,*,,******/*/((((((/*,**/*******/*****((//////////////#/****//(/*****(/(####(#(/
                //,,,,*********,*////(*,***********/***////////////////******/%#((//***/*(####((#(
                //***,********/**///((*,*************(//*////////////******************/*//*******
                //*/*,********(***,**/****///*///(#%%%#*/**/////////*//**************/*/*/****,***
                //*,,,*,,,****,,*****/*/*,********%%%%%#//////////////////********/((//***,*******
                //,,,,**,*********/***,*,**********%####%#*//***//////////////*****#(#///******,**
                //(*,,****//((#**************,******#####(#**/***/*///////////////**(/(/**********


            const ll MULTI_TESTS = 0;
    // here
    struct DSU{
    vector<int> x;
    vector<int> sz;
    vector<int> mx,mn;
    DSU(int n){
        x = vector<int> (n);
        sz = vector<int> (n);
        mx = vector<int> (n);
        mn = vector<int> (n);
        for(int i=0;i<n;i++) 
            x[i] = i,sz[i]=1,mx[i]=i,mn[i]=i;
    }
   int size(int A)
    {
        return -x[find(A)];
    }
    int find(int u){
        if (x[u]==u) return u;
        return x[u] = find(x[u]);
    }
    void join(int a,int b){
        int ra = find(a);
        int rb = find(b);
        if(ra == rb) return ;
        if(sz[ra] <sz[rb])
            swap(ra,rb);
        x[rb] = ra;
        sz[ra] +=sz[rb];
        mn[ra] = min(mn[ra],mn[rb]);
        mx[ra] = max(mx[ra],mx[rb]);
    }
    bool same(int A, int B)
    {
        return find(A) == find(B);
    }
};

            void unstoppable()
        {
    
            int n, m;
            cin >> n >> m;
            DSU dsu(maxn);
            while(m--)
                {
                    string s; int u,v;
                    cin >> s>>u;
                    if(s[0]=='u')
                    {
                        cin >> v;
                        dsu.join(u,v);
                    }
                    else
                    {
                        int tmp = dsu.find(u);
                        cout << dsu.mn[tmp]<<' '<<dsu.mx[tmp]<<' '<<dsu.sz[tmp]<<endl;
                    }
                }



        }







    // main

        signed main()
{
             std::ios::sync_with_stdio(false);
         cin.tie(0);cout.tie(0);
   if (MULTI_TESTS)
   {
        ll Q;
        cin >> Q;
        while (Q--) 
    {
            unstoppable();
        }
    } 
    else 
       {
        unstoppable();
       }
    return 0;
}




